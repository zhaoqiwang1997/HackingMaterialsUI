""" All tools needed to update async progress from Celery Tasks"""
import json
from datetime import datetime as dt

from .postg_db import MyDb, Tables


def update_row(data: dict) -> tuple:
    db = MyDb()

    return db.updaterow(Tables.TaskTbl, data)


def initialise_task(user_id: str, task_id: str):
    db = MyDb()
    now = dt.now()

    db.deleterow(Tables.TaskTbl, user_id)

    data = {
        "email": user_id,
        "status": {"state": "initialised"},
        "task_id": task_id,
        "result_location": "",
        "start_time": now,
        "last_update": now,
        "finish_time": None,
    }

    return db.createrow(Tables.TaskTbl, data)


def save_progress(user_id: str, status: str, timestamp=dt.now()) -> tuple:
    """ update database with progress of task. Can be polled from frontend

    Args:
        user_id (str): email address
        status (str): status
        timestamp (datetime, optional): timestamp. Defaults to dt.now().

    Returns:
        tuple: _description_
    """

    data = {
        "email": user_id,
        "last_update": timestamp,
        "status": {"state": status},
    }

    return update_row(data)


def save_result(user_id: str, result_location: dict, timestamp=dt.now()) -> tuple:
    """Save final result to database

    Args:
        user_id (str): email address
        result_location (dict): contains tablename and database key of result
        timestamp (datatime, optional): timestamp. Defaults to dt.now().

    Returns:
        tuple(bool, str): status of save to database
    """
    data = {
        "email": user_id,
        "last_update": timestamp,
        "status": {"state": "complete"},
        "finish_time": timestamp,
        "result_location": json.dumps(result_location),
    }

    return update_row(data)


def record_error(user_id: str, message: str, timestamp=dt.now()) -> tuple:
    """ If an error occurs add it to database

    Args:
        user_id (str): users email address
        message (str): error message
        timestamp (datetime, optional): timestamp. Defaults to dt.now().

    Returns:
        tuple: _description_
    """

    data = {
        "email": user_id,
        "last_update": timestamp,
        "status": {"state": "error", "result": message},
    }

    log_data = {
        "email": user_id,
        "timestamp": timestamp,
        "tag": "ML error",
        "error_msg": message,
    }

    # Log error
    MyDb().createrow(Tables.LogTbl, log_data)

    return update_row(data)


def get_status(task_id: str):
    """Get status when polled by frontend

    Args:
        task_id (str): Id of task generated by Celery

    Returns:
        str: status of task
    """

    sql = f"""SELECT status FROM running_tasks
          where task_id = '{task_id}'"""

    result, status = MyDb().raw_sql(sql)

    if result:
        return result, status[0]["status"]["state"]

    return result, status
